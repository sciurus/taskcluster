apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ${project_name}-${lowercase(job_name)}
spec:
  schedule: ${schedule}
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    metadata:
      creationTimestamp: null
      labels:
        application: taskcluster
        taskcluster-service: ${project_name}
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          dnsPolicy: ClusterFirst
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          activeDeadlineSeconds: {$eval: 'deadline_seconds'}
          volumes:
            $if: 'len(volume_mounts) > 0'
            then:
              $map: {$eval: volume_mounts}
              each(mount):
                name: ${mount.source}
                secret:
                  secretName: ${secret_name}
                  items:
                    - key: ${mount.source}
                      path: ${mount.name}
          containers:
          - name: ${project_name}-${lowercase(job_name)}
            image: ${docker_image}
            imagePullPolicy: Always
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            args:
              $if: 'is_monoimage'
              then: ['${service_name}/${job_name}']
              else: ['${job_name}']
            resources:
              # TODO: Make configurable
              requests:
                cpu: 100m
                memory: 100Mi
            volumeMounts:
              $if: 'len(volume_mounts) > 0'
              then:
                $map: {$eval: volume_mounts}
                each(mount):
                  name: ${mount.source}
                  mountPath: ${mount.path}
                  readOnly: true
            env:
              $flatten:
                - name: TASKCLUSTER_ROOT_URL
                  value: ${root_url}
                - $map: {$eval: 'secret_keys'}
                  each(k):
                    name: '${uppercase(k)}'
                    valueFrom:
                      secretKeyRef:
                        name: '${secret_name}'
                        key: '${uppercase(k)}'
status: {}
